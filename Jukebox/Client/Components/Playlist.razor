@using Jukebox.Shared.Player

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IHubStore HubStore
@inject IState<Jukebox.Shared.Store.States.PlaylistState> State

@if (State.Value != null)
{
    <MatList>
        @foreach (var (song, i) in State.Value.AllSongs.Select((song, index) => (song, index)))
        {
            <MatListItem Style="@(State.Value.CurrentSong == song ? "background-color: lightgrey;" : "")">
                <MatIconButton Icon="@MatIconNames.Play_circle_filled" OnClick="async () => await ChangeSong(song)"></MatIconButton>
                <MatListItemText>
                    <MatListItemPrimaryText>@song.Name</MatListItemPrimaryText>
                    <MatListItemSecondaryText>@song.Duration.ToDurationString()</MatListItemSecondaryText>
                </MatListItemText>
                <MatIconButton Class="float-right" Icon="@MatIconNames.Delete" Disabled="State.Value.CurrentSong == song" OnClick="async () => await RemoveSong(song)"></MatIconButton>
            </MatListItem>
            if (i < State.Value.AllSongs.Count - 1)
            {
                <MatDivider></MatDivider>
            }
        }
        @if (!State.Value.AllSongs.Any())
        {
            <MatListItem><em>empty</em></MatListItem>
        }
    </MatList>
}

@code {
    private async Task ChangeSong(SongInfo song)
    {
        await HubStore.ChangeSong(song);
    }

    private async Task RemoveSong(SongInfo song)
    {
        if (State.Value?.CurrentSong == song)
        {
            return;
        }

        await HubStore.RemoveSong(song);
    }
}
