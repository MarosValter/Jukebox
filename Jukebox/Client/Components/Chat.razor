@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IHubStore HubStore
@inject IState<Jukebox.Shared.Store.States.RoomState> State

<MatList>
    @if (State.Value != null)
    {
            foreach (var m in State.Value.ChatMessages)
            {
                <MatListItem Disabled="true">
                    <MatListItemText>
                        <MatListItemPrimaryText>@GetSenderString(m) (@m.SentWhen.ToString("HH:mm"))</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@m.Message</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>
                @*if (m < State.Value.ChatMessages.Count - 1)
                    {
                        <MatDivider></MatDivider>
                    }*@
            }

        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@_messageParameters.Message" Label="Message" FullWidth="true"></MatTextField>
                <MatTextField @bind-Value="@_messageParameters.TargetUsername" Label="Whisper to (leave blank if public):" FullWidth="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatButton Icon="@MatIconNames.Search" OnClick="@AddMessage" Raised="true">Send</MatButton>
            </div>
        </fieldset>

    }
</MatList>

@code {
    [Parameter]
    public string Message { get; set; }

    private readonly ChatMessageParameters _messageParameters = new ChatMessageParameters();

    public class ChatMessageParameters
    {
        public string Message { get; set; }
        public string TargetUsername { get; set; }
    }
    private async Task AddMessage()
    {
        var message = new Jukebox.Shared.Player.ChatMessageInfo
        {
            Message = _messageParameters.Message,
            SentWhen = DateTime.Now,
            Sender = State.Value?.CurrentUser,
            Reciever = State.Value?.Users.FirstOrDefault(x => x.Name == _messageParameters.TargetUsername),
        };

        _messageParameters.Message = string.Empty;
        _messageParameters.TargetUsername = string.Empty;
        await HubStore.AddMessage(message);
    }

    private string GetSenderString(Jukebox.Shared.Player.ChatMessageInfo message)
    {
        if (message.Sender.ConnectionId == State.Value?.ConnectionId && message.Reciever != null)
        {
            return "Whisper to " + message.Reciever.Name;
        }
        else if (message.Reciever?.ConnectionId == State.Value?.ConnectionId)
        {
            return "Whisper from " + message.Sender.Name;
        }
        return message.Sender.Name;
    }
}
