@using Jukebox.Player.Search
@using Jukebox.Player.Base
@using Jukebox.Shared.Player
@using System.Globalization

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IHubStore HubStore
@inject IState<Jukebox.Shared.Store.States.RoomState> State
@inject ISearchEngineProvider SearchEngineProvider

<div class="mat-layout-grid pt-0">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-9">
            <MatTextField @bind-Value="@_queryText" Label="Search text" FullWidth="true"></MatTextField>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3" style="align-self: center; justify-self: center;">
            <MatButton Icon="@MatIconNames.Search" OnClick="@Search" Raised="true" Disabled="@_searching">Search</MatButton>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <MatList>
                @foreach (var (result, i) in _results.Select((result, i) => (result, i)))
                {
                    <MatListItem Class="my-1 px-0">
                        <img src="@result.ThumbnailUrl" width="120" height="90" />
                        <MatListItemPrimaryText>@result.Title - <em>@result.Duration.ToDurationString()</em></MatListItemPrimaryText>
                        <MatListItemSecondaryText>@result.ViewCount.ToString("#,#", new NumberFormatInfo { NumberGroupSeparator = " " })</MatListItemSecondaryText>
                        <MatIconButton Class="float-right" Icon="@MatIconNames.Playlist_add" OnClick="async () => await AddSong(result)"></MatIconButton>
                    </MatListItem>
                    if (i < _results.Count - 1)
                    {
                        <MatDivider></MatDivider>
                    }
                }
            </MatList>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public PlayerType Type { get; set; } = PlayerType.None;

    private ISearchEngine _searchEngine;

    private bool _searching;
    private string _queryText;
    private IList<SearchResultInfo> _results = new List<SearchResultInfo>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _searchEngine = SearchEngineProvider.GetSearchEngine(Type);
    }

    private async Task Search()
    {
        if (!string.IsNullOrEmpty(_queryText))
        {
            _searching = true;
            _results = await _searchEngine.Search(_queryText, 10);
            _searching = false;
        }
    }

    private async Task AddSong(SearchResultInfo result)
    {
        var song = new SongInfo
        {
            Id = result.Id,
            Name = result.Title,
            Duration = result.Duration,
            Type = Type,
            AddedBy = State.Value?.CurrentUser.Name

        };

        await HubStore.AddSong(song);
    }
}
