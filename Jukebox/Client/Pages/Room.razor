@page "/{roomName}/{userName}"

@using Jukebox.Shared.Player
@using Microsoft.AspNetCore.SignalR.Client
@using Jukebox.Player

@implements IAsyncDisposable

@inject NavigationManager NavigationManager

@inject IJSRuntime JsRuntime

<MatH2 Class="text-center pb-5">Room: @RoomName</MatH2>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            <MatAccordion>
                <MatExpansionPanel Class="mat-elevation-z6">
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>Media</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <Player Playlist="@RoomInfo?.Playlist"></Player>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            </MatAccordion>
            <MatAccordion>
                <MatExpansionPanel @bind-Expanded="@_playlistOpened" Class="mat-elevation-z6">
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>Playlist</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <Playlist PlaylistInfo="@RoomInfo?.Playlist" RoomName="@RoomName" HubConnection="@_hubConnection"></Playlist>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            </MatAccordion>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            <MatTabGroup Class="mat-elevation-z6">
                <MatTab Label="Users">
                    <UserList RoomInfo="@RoomInfo" User="@User"></UserList>
                </MatTab>
                <MatTab Label="Chat">

                </MatTab>
                <MatTab Label="YouTube">
                    <SearchList Type="@PlayerType.YouTube" RoomName="@RoomName" HubConnection="@_hubConnection"></SearchList>
                </MatTab>
                <MatTab Label="Spotify">

                </MatTab>
            </MatTabGroup>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string RoomName { get; set; }

    [Parameter]
    public string UserName { get; set; }

    public UserInfo User { get; set; }

    public RoomInfo RoomInfo { get; set; }


    private HubConnection _hubConnection;

    private bool _playlistOpened;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/jukeboxHub"))
            .Build();

        _hubConnection.On<string, RoomInfo>("RoomEntered", RoomEntered);
        _hubConnection.On<UserInfo>("UserAdded", UserAdded);
        _hubConnection.On<string>("UserRemoved", UserRemoved);
        _hubConnection.On<SongInfo>("SongAdded", SongAdded);
        _hubConnection.On<SongInfo>("SongRemoved", SongRemoved);

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("EnterRoom", RoomName, UserName);
    }

    private void RoomEntered(string connectionId, RoomInfo room)
    {
        User = new UserInfo
        {
            Name = UserName,
            ConnectionId = connectionId
        };
        RoomInfo = room;
        StateHasChanged();
        Console.WriteLine("Room entered with connectionId: {0}", connectionId);
    }

    private void UserAdded(UserInfo user)
    {
        RoomInfo.Users.Add(user);
        StateHasChanged();
        Console.WriteLine("New user added : {0} ({1})", user.Name, user.ConnectionId);
    }

    private void UserRemoved(string connectionId)
    {
        RoomInfo.Users.RemoveAt(RoomInfo.Users.FindIndex(x => x.ConnectionId == connectionId));
        StateHasChanged();
        Console.WriteLine("User leaved : {0}", connectionId);
    }

    private void SongAdded(SongInfo song)
    {
        RoomInfo.Playlist.AllSongs.Add(song);
        StateHasChanged();
    }

    private void SongRemoved(SongInfo song)
    {
        RoomInfo.Playlist.AllSongs.RemoveAt(RoomInfo.Playlist.AllSongs.FindIndex(x => x.Id == song.Id && x.Type == song.Type));
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.SendAsync("LeaveRoom", RoomName);
        await _hubConnection.StopAsync();
        await _hubConnection.DisposeAsync();
        Console.WriteLine("Room leaved");
    }

}
